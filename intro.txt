1) reactivity is the core feature of vue. when we create data property in vue behind the 
   sens vue will assign the data property to global object

2) and vue will wrap all data with feature called proxy which is built in js feature from 
   es6 which will listen to all changes we do on any data and run getter and setter of it

3) when data change vue will know about that change and also scan the html then all the place
   where we use that data will re render with new data. you can learn more about proxy in
   mdn official doc.

4) like you are using id app and control that part of html in vue you can create as many 
    vue control template as you want just keep in mind all the data, method and other property
    you define in property will be only accessible to those apps you can't share them between
    multiple apps or templates

5) part we define inside id app which we control by vue is called template and mostly we
   create one parent element with some id and we mount it with our vue app and all sub elements
   of that app will be handled by vue. we are free to use multiple sub elements inside element
   which we use to mount only in multi page apps in spa we have to use just one element 
   as main in each component and then we can use multiple elements inside it so vue can 
   know that which is the part it have to handle by provided bellow code.

6) creating main element and mounting it with app and define all html template inside it in 
   html or vue file is the most common way we use templating in our code but we can also
   define template for app in our vue code as well by template property which we will use 
   in 0.2% cases only but it is still worth to know. for ex see template html and js

7) as you know vue will only update part of dom which is actually changed not entire dom or
   html but you know how it dose that?
   - vue will first scan file and all the special syntax like {{}} @click etc will be
   convert to actual js properties like {{}} will replace with actual data value and @click
   will be convert to js event listeners and then vue will dump all that to browser dom

   - now vue will create the virtual dom which is just js file which has all things which
   is present in actual browser dom and it will be in memory then when anything change in 
   any property vue will create new copy of virtual dom and compare it to old one and where
   it find difference it will only change those places in browser dom.

   - because all this happen in memory of js engine it will way more efficient then other.
   vue also do lots of other things for optimization but it's a general idea. 

   
   // life cycle hooks
   1) as like other frameworks vue also has it's on lifecycle for working. every vue app or a
      component will go through lifecycle and many times we want to do some tasks on diffrent 
      phases of the lifecycle of app or component

   2) and to listern to those types of lifecycle and do some diffrent tasks on those phases
      vue provide us hooks which called lifecycle hooks and those hooks are just functions 
      you can say which will be execute on diffrent phases or lifecycle

   3) vue has mostly 3 types of phases in vue app and components creation, updation, unmount every type contain some
      phase has some hooks

      1) creation
         - beforeCreate()
         - created()
         - beforeMount()
         - mounted()

      2) updation
         - beforeUpdate()
         - updated()

      3) unmount
         - beforeUnmount()
         - unmount()      

   4) hear creation and unmount phases will happen only once in every app or component but
      the updation phase can happen n number of times in any app or component. 

   5) every lifecycle method automatically get this context so that you can access data, computed,
      and methods in hooks. that mins you should not use arrow function to define any lifecycle
      hook because an arrow function will not get this in it. you should use normal function like we
      use in methods.  
      
      
      we will discuss
      more about lifecycle hooks in lifecycleHooks files.
      
   // vary IMP
   6) after learning about lifecycle hooks come hear again 
   - try to execute this code 
   data(){
      return {
         tmp: {one: "one"}
      };
   },

// case 1
   created() {
      this.tmp.one = 'one changed'
      this.tmp.two = 'two';
    
      setTimeout(() => {
         this.tmp.two = 'two chnaged';
      }, 5000)
   }
   
// case 2
   created() {
      this.tmp.one = 'one changed'
      setTimeout(() => {
         this.tmp.two = {};
         this.tmp.two.a = 'a'; 
      }, 5000)
   }
   
   
   // in html
   // case 1
   {{ tmp.one }}
   {{ tmp.two }}
   
   
   // case 2
   {{ tmp.one }}
   {{ tmp.two.a }}
   
 //case 1
- what you will se hear is we defien tmp as object which initiall not contain two property but we are adding it in creation time and then after 5 sec we are changing
its value and outputing it in template and when the two chnage it also reflect in template that mins any time in our code if we add any new thing in object which is define 
already but not contain that new key value pair still that new value will be reactive

// case 2 
in case 2 we are adding two and a in two after 5 sec to simulate api call taht mins it won't be avalable before 5 sec and we are using a which will be inside two after 5 sec in
template so initeally it will give err that cannot read property a of undefine and after 5 sec it will render 
hear problem is not because two will be not abalable before 5 sec if we print just tmp.tow in case two it won't give err but the problem is we are getting a from tow which is still not there it will be there after 5 sec bit template will be executed before that 
so to avoid this kind of err if we are in vue 3 we can just use optional chaning like {{ tmp?.tow?.a }} and if we are in vue 2 we can use async pipe package or just use 
{{ tmp.tow && tmp.tow.a ? tmp.tow.a : '' }} something like that but my advice is for vue 2 just use async pipe it will be more batter
